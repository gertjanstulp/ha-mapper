# frontend_repo_url: http://localhost:5000

plugins:
  - module: custom_components.react.plugin.notify
  - module: custom_components.react.plugin.telegram
    config:
      entity_maps:
        "2095689255": telegram_user
        "-719737734": telegram_group
  - module: custom_components.react.plugin.persistent_notification
  - module: custom_components.react.plugin.mobile_app
    config:
      entity_maps:
        "7237746fa7daec45": mobile_app_hd1903
        
  - module: custom_components.react.plugin.input_boolean
  - module: custom_components.react.plugin.input_button
  - module: custom_components.react.plugin.input_number
  - module: custom_components.react.plugin.input_text
  - module: custom_components.react.plugin.light
  - module: custom_components.react.plugin.switch

  - module: custom_components.react.plugin.group

  - module: custom_components.react.plugin.media_player
    config:
      tts_provider: google_translate
  - module: custom_components.react.plugin.sonos
  - module: custom_components.react.plugin.browser_mod
  - module: custom_components.react.plugin.google_translate
    config:
      language: nl
  - module: custom_components.react.plugin.cloud
    config:
      language: nl-NL
      options:
        voice: MaartenNeural

  - module: custom_components.react.plugin.alarm_control_panel
    config:
      code: '1234'

  - module: custom_components.react.plugin.binary_sensor
  - module: custom_components.react.plugin.device_tracker
  - module: custom_components.react.plugin.person
  - module: custom_components.react.plugin.sensor

  - module: custom_components.react.plugin.time
  - module: custom_components.react.plugin.hass
  - module: custom_components.react.plugin.state

stencil:
  full_stencil:
    when:
      id: actor_full_stencil
      entity: actor_entity_full_stencil
      type: actor_type_full_stencil
      action: actor_action_full_stencil
    then: 
      id: reactor_full_stencil
      entity: reactor_entity_full_stencil
      type: reactor_type_full_stencil
      action: reactor_action_full_stencil
      data:
        test: 37

  partial_stencil:
    then: 
      id: reactor_partial_stencil
      type: reactor_type_partial_stencil
      action: reactor_action_partial_stencil

workflow:
  workflow_immediate:
    when:
      id: actor_immediate
      entity: actor_entity_immediate
      type: actor_type_immediate
      action: actor_action_immediate
    then: 
      id: reactor_immediate
      entity: reactor_entity_immediate
      type: reactor_type_immediate
      action: reactor_action_immediate

  workflow_delayed:
    when:
      id: actor_delayed
      entity: actor_entity_delayed
      type: actor_type_delayed
      action: actor_action_delayed
    then:
      id: reactor_delayed 
      entity: reactor_entity_delayed
      type: reactor_type_delayed
      action: reactor_action_delayed
      wait:
        delay: 
          seconds: 3

  workflow_overwrite:
    when:
      id: actor_overwrite
      entity: actor_entity_overwrite
      type: actor_type_overwrite
      action: actor_action_overwrite
    then:
      id: reactor_overwrite 
      entity: reactor_entity_overwrite
      type: reactor_type_overwrite
      action: reactor_action_overwrite
      overwrite: True
      wait:
        delay: 
          seconds: 10

  workflow_scheduled:
    when: 
      id: actor_scheduled
      entity: actor_entity_scheduled
      type: actor_type_scheduled
      action: actor_action_scheduled
    then: 
      id: reactor_scheduled 
      entity: reactor_entity_scheduled
      type: reactor_type_scheduled
      action: reactor_action_scheduled
      wait:
        schedule:
          at: "12:34:56"
          weekdays:
            fri

  workflow_reset:
    when: 
      id: actor_reset
      entity: actor_entity_reset
      type: actor_type_reset
      action: actor_action_reset
    then:
      - id: reactor_reset_1
        reset_workflow: workflow_delayed
      - id: reactor_reset_2
        reset_workflow: workflow_scheduled

  workflow_forward_action:
    when:
      id: actor_forward_action
      entity: actor_entity_forward_action
      type: actor_type_forward_action
    then: 
      id: reactor_forward_action
      entity: reactor_entity_forward_action
      type: reactor_type_forward_action
      forward_action: True
  
  workflow_forward_data:
    when:
      id: actor_forward_data
      entity: actor_entity_forward_data
      type: actor_type_forward_data
      action: actor_action_forward_data
    then: 
      id: reactor_forward_data
      entity: reactor_entity_forward_data
      type: reactor_type_forward_data
      action: reactor_action_forward_data
      forward_data: True

  workflow_trace_basic_test:
    when:
      - entity: actor_entity_trace_basic_test_1
        type: actor_type_trace_basic_test_1
        action: actor_action_trace_basic_test_1
        condition: "{{ is_state('input_boolean.trace_basic_test', 'off') }}"
      - entity: actor_entity_trace_basic_test_2
        type: actor_type_trace_basic_test_2
        action: actor_action_trace_basic_test_2
    then: 
      - entity: reactor_entity_trace_basic_test_1
        type: reactor_type_trace_basic_test_1
        action: reactor_action_trace_basic_test_1
        condition: "{{ is_state('input_boolean.trace_basic_test', 'on') }}"
      - entity: reactor_entity_trace_basic_test_2
        type: reactor_type_trace_basic_test_2
        action: reactor_action_trace_basic_test_2

  workflow_trace_advanced_test:
    when:
      - entity: actor_entity_trace_advanced_test_1
        type: actor_type_trace_advanced_test_1
        action: actor_action_trace_advanced_test_1
        condition: "{{ is_state('input_boolean.trace_advanced_test', 'off') }}"
      - entity: actor_entity_trace_advanced_test_2
        type: actor_type_trace_advanced_test_2
        action: actor_action_trace_advanced_test_2
        condition: "{{ is_state('input_boolean.trace_advanced_test', 'on') }}"
    then: 
      - entity: reactor_entity_trace_advanced_test_1
        type: reactor_type_trace_advanced_test_1
        action: reactor_action_trace_advanced_test_1
        condition: "{{ is_state('input_boolean.trace_advanced_test', 'on') }}"
        wait:
          delay:
            seconds: 3
          state:
            condition: "{{ is_state('input_boolean.trace_advanced_test', 'off') }}"
      - reset_workflow: workflow_scheduled
        entity: reactor_entity_trace_advanced_test_2
        type: reactor_type_trace_advanced_test_2
        action: reactor_action_trace_advanced_test_2
        wait:
          schedule:
            at: '21:00:00'
          state:
            condition: "{{ is_state('input_boolean.trace_advanced_test', 'on') }}"

  workflow_multiple_actor:
    when:
      - id: actor_multiple_actor_1
        entity: actor_entity_multiple_actor_1
        type: actor_type_multiple_actor_1
        action: actor_action_multiple_actor_1
      - id: actor_multiple_actor_2
        entity: actor_entity_multiple_actor_2
        type: actor_type_multiple_actor_2
        action: actor_action_multiple_actor_2
    then: 
      id: reactor_multiple_actor
      entity: reactor_entity_multiple_actor
      type: reactor_type_multiple_actor
      action: reactor_action_multiple_actor

  workflow_multiple_reactor:
    when:
      id: actor_multiple_reactor
      entity: actor_entity_multiple_reactor
      type: actor_type_multiple_reactor
      action: actor_action_multiple_reactor
    then: 
      - id: reactor_multiple_reactor_1
        entity: reactor_entity_multiple_reactor_1
        type: reactor_type_multiple_reactor_1
        action: reactor_action_multiple_reactor_1
      - id: reactor_multiple_reactor_2
        entity: reactor_entity_multiple_reactor_2
        type: reactor_type_multiple_reactor_2
        action: reactor_action_multiple_reactor_2

  workflow_multiple_entities:
    when:
      id: actor_multiple_entities
      entity: 
        - actor_entity_multiple_entities_1
        - actor_entity_multiple_entities_2
      type: actor_type_multiple_entities
      action: actor_action_multiple_entities
    then:
      id: reactor_multiple_entities
      entity: reactor_entity_multiple_entities
      type: reactor_type_multiple_entities
      action: reactor_action_multiple_entities

  workflow_data:
    variables:
      type_templated: "{{ 1 + 2 }}"
    when:
      id: actor_data
      entity: actor_entity_data
      type: actor_type_data
      action: actor_action_data
      data:
        actor_data_data: "{{ type_templated }}"
    then: 
      id: reactor_data
      entity: reactor_entity_data
      type: reactor_type_data
      action: reactor_action_data
      data:
        data1: 1
        data2: "{{ event.action }}"
        data3: "{{ type_templated }}"
        data4: 
          - asdf
          - qwer
        data5: "{{ actor.id }}"

  workflow_data_delayed:
    when:
      id: actor_data_delayed
      entity: actor_entity_data_delayed
      type: actor_type_data_delayed
      action: actor_action_data_delayed
    then: 
      id: reactor_data_delayed
      entity: reactor_entity_data_delayed
      type: reactor_type_data_delayed
      action: reactor_action_data_delayed
      wait:
        delay:
          seconds: "{{ 60 }}"
      data:
        data1: 1
        data2: True

  workflow_multiple_actor_data:
    when:
      id: actor_multiple_actor_data
      entity: actor_entity_multiple_actor_data
      type: actor_type_multiple_actor_data
      action: actor_action_multiple_actor_data
      data:
        - actor_data_multiple_actor_data: 1
        - actor_data_multiple_actor_data: 2
    then:
      id: reactor_multiple_actor_data
      entity: reactor_entity_multiple_actor_data
      type: reactor_type_multiple_actor_data
      action: reactor_action_multiple_actor_data

  workflow_full_stencil:
    stencil: full_stencil

  workflow_partial_stencil:
    stencil: partial_stencil
    when:
      id: actor_partial_stencil
      entity: actor_entity_partial_stencil
      type: actor_type_partial_stencil
      action: actor_action_partial_stencil
    then:
      id: reactor_partial_stencil
      entity: reactor_entity_partial_stencil

  workflow_templated:
    variables:
      templated: templated
    when:
      id: actor_templated
      entity: "{{ 'actor_entity_templated' }}"
      type: "{{ 'actor' ~ '_type' ~ '_templated' }}"
      action: "{{ 'actor_action_' ~ templated }}"
    then:
      id: reactor_templated
      entity: "{{ 're' ~ event.entity }}"
      type: "{{ 'reactor' ~ '_type' ~ '_templated' }}"
      action: "{{ 'reactor_action_' ~ templated }}"

  workflow_templated_state_test:
    when:
      entity: "{{ 'actor_entity_templated_state_test' }}"
      type: "{{ 'actor' ~ '_type' ~ '_templated_state_test' }}"
      action: "{{ 'actor_action_' ~ states('input_text.templated_state_test') }}"
    then:
      entity: "{{ 're' ~ event.entity }}"
      type: "{{ 'reactor' ~ '_type' ~ '_templated_state_test' }}"
      action: "{{ 'reactor_action_' ~ states('input_text.templated_state_test') }}"

  workflow_actor_condition_test:
    when:
      entity: actor_entity_actor_condition_test
      type: actor_type_actor_condition_test
      action: actor_action_actor_condition_test
      condition: "{{ is_state('input_boolean.actor_condition_test', 'on') }}"
    then:
      entity: reactor_entity_actor_condition_test
      type: reactor_type_actor_condition_test
      action: reactor_action_actor_condition_test

  workflow_reactor_condition_test:
    when:
      entity: actor_entity_reactor_condition_test
      type: actor_type_reactor_condition_test
      action: actor_action_reactor_condition_test
    then:
      entity: reactor_entity_reactor_condition_test
      type: reactor_type_reactor_condition_test
      action: reactor_action_reactor_condition_test
      condition: "{{ is_state('input_boolean.reactor_condition_test', 'on') }}"

  workflow_binary_sensor_state_test:
    when:
      entity: binary_sensor_state_test
      type: binary_sensor
      action: 'off'
    then:
      entity: reactor_entity_binary_sensor_state_test
      type: reactor_type_binary_sensor_state_test
      action: reactor_action_binary_sensor_state_test

  workflow_group_state_test:
    when:
      entity: group_state_test
      type: group
      action: 'on'
    then:
      entity: reactor_entity_group_state_test
      type: reactor_type_group_state_test
      action: reactor_action_group_state_test

  workflow_person_group_state_test:
    when:
      entity: person_group_state_test
      type: group
      action: home
    then:
      entity: reactor_entity_person_group_state_test
      type: reactor_type_person_group_state_test
      action: reactor_action_person_group_state_test

  workflow_device_tracker_state_test:
    when:
      entity: device_tracker_state_test
      type: device_tracker
      action: home
    then:
      entity: reactor_entity_device_tracker_state_test
      type: reactor_type_device_tracker_state_test
      action: reactor_action_device_tracker_state_test

  workflow_person_state_test:
    when:
      entity: person_state_test
      type: person
      action: not_home
    then:
      entity: reactor_entity_person_state_test
      type: reactor_type_person_state_test
      action: reactor_action_person_state_test

  workflow_input_number_state_test:
    when:
      entity: input_number_state_test
      type: input_number
      action: change
    then:
      entity: reactor_entity_input_number_state_test
      type: reactor_type_input_number_state_test
      action: reactor_action_input_number_state_test

  workflow_input_text_state_test:
    when:
      entity: input_text_state_test
      type: input_text
      action: change
    then:
      entity: reactor_entity_input_text_state_test
      type: reactor_type_input_text_state_test
      action: reactor_action_input_text_state_test

  workflow_input_boolean_state_test:
    when:
      entity: input_boolean_state_test
      type: input_boolean
      action: toggle
    then:
      entity: reactor_entity_input_boolean_state_test
      type: reactor_type_input_boolean_state_test
      action: reactor_action_input_boolean_state_test

  workflow_input_button_state_test:
    when:
      entity: input_button_state_test
      type: input_button
      action: press
    then:
      entity: reactor_entity_input_button_state_test
      type: reactor_type_input_button_state_test
      action: reactor_action_input_button_state_test

  workflow_light_state_test:
    when:
      entity: light_state_test
      type: light
      action: toggle
    then:
      entity: reactor_entity_light_state_test
      type: reactor_type_light_state_test
      action: reactor_action_light_state_test

  workflow_switch_state_test:
    when:
      entity: switch_state_test
      type: switch
      action: toggle
    then:
      entity: reactor_entity_switch_state_test
      type: reactor_type_switch_state_test
      action: reactor_action_switch_state_test

  workflow_alarm_state_test:
    when:
      entity: alarm_state_test
      action: armed_home
      type: alarm_control_panel
    then:
      entity: reactor_entity_alarm_state_test
      type: reactor_type_alarm_state_test
      action: reactor_action_alarm_state_test

  workflow_sensor_state_test:
    when:
      entity: sensor_state_test
      type: sensor
      action: change
    then:
      entity: reactor_entity_sensor_state_test
      type: reactor_type_sensor_state_test
      action: reactor_action_sensor_state_test

  workflow_media_player_state_test:
    when:
      entity: media_player_state_test
      type: media_player
      action: playing
    then:
      entity: reactor_entity_media_player_state_test
      type: reactor_type_media_player_state_test
      action: reactor_action_media_player_state_test

  workflow_fan_state_test:
    when:
      entity: fan_state_test
      type: fan
      action: change
    then:
      entity: reactor_entity_fan_state_test
      type: reactor_type_fan_state_test
      action: reactor_action_fan_state_test

  workflow_fan_state_percentage_test:
    when:
      entity: fan_state_percentage_test
      type: fan
      action: change
    then:
      entity: reactor_entity_fan_state_percentage_test
      type: reactor_type_fan_state_percentage_test
      action: reactor_action_fan_state_percentage_test


  workflow_state_track_test:
    when:
      entity: input_number.input_number_value_test
      type: state
      action: change
    then:
      entity: "{{ event.entity }}"
      type: state
      action: log
      forward_data: True

  workflow_hass_event_start_test:
    when:
      entity: hass
      type: system
      action: start
    then:
      entity: reactor_entity_hass_event_start_test
      type: reactor_type_hass_event_start_test
      action: reactor_action_hass_event_start_test

  workflow_hass_event_started_test:
    when:
      entity: hass
      type: system
      action: started
    then:
      entity: reactor_entity_hass_event_started_test
      type: reactor_type_hass_event_started_test
      action: reactor_action_hass_event_started_test

  workflow_hass_event_shutdown_test:
    when:
      entity: hass
      type: system
      action: shutdown
    then:
      entity: reactor_entity_hass_event_shutdown_test
      type: reactor_type_hass_event_shutdown_test
      action: reactor_action_hass_event_shutdown_test

  workflow_time_clock:
    when:
      entity: clock
      type: time
      action: "23:59:59"
    then:
      entity: reactor_entity_time_clock
      type: reactor_type_time_clock
      action: reactor_action_time_clock

  workflow_time_pattern:
    when:
      entity: pattern
      type: time
      action: "23:59:59" # keep like this, otherwise test instance will constantly trigger. will be set properly by unittest
    then:
      entity: reactor_entity_time_pattern
      type: reactor_type_time_pattern
      action: reactor_action_time_pattern

  workflow_time_sunrise:
    when:
      entity: sunrise
      type: time
      action: "-"
    then:
      entity: reactor_entity_sunrise
      type: reactor_type_sunrise
      action: reactor_action_sunrise

  workflow_time_sunrise_with_offset:
    when:
      entity: sunrise
      type: time
      action: "+00:30:00"
    then:
      entity: reactor_entity_sunrise_with_offset
      type: reactor_type_sunrise_with_offset
      action: reactor_action_sunrise_with_offset

  workflow_time_sunset:
    when:
      entity: sunset
      type: time
      action: "-"
    then:
      entity: reactor_entity_sunset
      type: reactor_type_sunset
      action: reactor_action_sunset

  workflow_time_sunset_with_offset:
    when:
      entity: sunset
      type: time
      action: "-00:30:00"
    then:
      entity: reactor_entity_sunset_with_offset
      type: reactor_type_sunset_with_offset
      action: reactor_action_sunset_with_offset

  workflow_binary_sensor_available_test:
    when:
      entity: binary_sensor_available_test
      type: binary_sensor
      action: available
    then:
      entity: actor_entity_binary_sensor_available_test
      type: actor_type_binary_sensor_available_test
      action: actor_action_binary_sensor_available_test

  workflow_binary_sensor_unavailable_test:
    when:
      entity: binary_sensor_unavailable_test
      type: binary_sensor
      action: unavailable
    then:
      entity: actor_entity_binary_sensor_unavailable_test
      type: actor_type_binary_sensor_unavailable_test
      action: actor_action_binary_sensor_unavailable_test

  workflow_device_tracker_available_test:
    when:
      entity: device_tracker_available_test
      type: device_tracker
      action: available
    then:
      entity: actor_entity_device_tracker_available_test
      type: actor_type_device_tracker_available_test
      action: actor_action_device_tracker_available_test

  workflow_device_tracker_unavailable_test:
    when:
      entity: device_tracker_unavailable_test
      type: device_tracker
      action: unavailable
    then:
      entity: actor_entity_device_tracker_unavailable_test
      type: actor_type_device_tracker_unavailable_test
      action: actor_action_device_tracker_unavailable_test

  workflow_wait_for_state_test:
    when:
      entity: actor_entity_wait_for_state_test
      type: actor_type_wait_for_state_test
      action: actor_action_wait_for_state_test
    then: 
      entity: reactor_entity_wait_for_state_test
      type: reactor_type_wait_for_state_test
      action: reactor_action_wait_for_state_test
      wait:
        state:
          condition: "{{ is_state('input_boolean.wait_for_state_test', 'on') }}"

  workflow_wait_for_state_delayed_test:
    when:
      entity: actor_entity_wait_for_state_delayed_test
      type: actor_type_wait_for_state_delayed_test
      action: actor_action_wait_for_state_delayed_test
    then: 
      entity: reactor_entity_wait_for_state_delayed_test
      type: reactor_type_wait_for_state_delayed_test
      action: reactor_action_wait_for_state_delayed_test
      wait:
        delay: 
          seconds: 3
        state:
          condition: "{{ is_state('input_boolean.wait_for_state_delayed_test', 'on') }}"

  workflow_delayed_long_single:
    mode: single
    when:
      id: actor_delayed_long_single
      entity: actor_entity_delayed_long_single
      type: actor_type_delayed_long_single
      action: actor_action_delayed_long_single
    then:
      id: reactor_delayed_long_single 
      entity: reactor_entity_delayed_long_single
      type: reactor_type_delayed_long_single
      action: reactor_action_delayed_long_single
      wait:
        delay: 
          seconds: 300

  workflow_delayed_long_restart:
    mode: restart
    when:
      id: actor_delayed_long_restart
      entity: actor_entity_delayed_long_restart
      type: actor_type_delayed_long_restart
      action: actor_action_delayed_long_restart
    then:
      id: reactor_delayed_long_restart 
      entity: reactor_entity_delayed_long_restart
      type: reactor_type_delayed_long_restart
      action: reactor_action_delayed_long_restart
      wait:
        delay: 
          seconds: 300

  workflow_delayed_long_queued:
    mode: queued
    when:
      id: actor_delayed_long_queued
      entity: actor_entity_delayed_long_queued
      type: actor_type_delayed_long_queued
      action: actor_action_delayed_long_queued
    then:
      id: reactor_delayed_long_queued 
      entity: reactor_entity_delayed_long_queued
      type: reactor_type_delayed_long_queued
      action: reactor_action_delayed_long_queued
      wait:
        delay: 
          seconds: 3

  workflow_delayed_long_parallel:
    mode: parallel
    when:
      id: actor_delayed_long_parallel
      entity: actor_entity_delayed_long_parallel
      type: actor_type_delayed_long_parallel
      action: actor_action_delayed_long_parallel
    then:
      id: reactor_delayed_long_parallel 
      entity: reactor_entity_delayed_long_parallel
      type: reactor_type_delayed_long_parallel
      action: reactor_action_delayed_long_parallel
      wait:
        delay: 
          seconds: 3

  workflow_scheduled_restart_abort:
    when:
      id: actor_scheduled_restart_abort
      entity: actor_entity_scheduled_restart_abort
      type: actor_type_scheduled_restart_abort
      action: actor_action_scheduled_restart_abort
    then:
      id: reactor_scheduled_restart_abort 
      entity: reactor_entity_scheduled_restart_abort
      type: reactor_type_scheduled_restart_abort
      action: reactor_action_scheduled_restart_abort
      wait:
        schedule:
          at: "00:00:00"
          restart_mode: abort

  workflow_scheduled_restart_force:
    when:
      id: actor_scheduled_restart_force
      entity: actor_entity_scheduled_restart_force
      type: actor_type_scheduled_restart_force
      action: actor_action_scheduled_restart_force
    then:
      id: reactor_scheduled_restart_force 
      entity: reactor_entity_scheduled_restart_force
      type: reactor_type_scheduled_restart_force
      action: reactor_action_scheduled_restart_force
      wait:
        schedule:
          at: "00:00:00"
          restart_mode: force

  workflow_media_player_speak_test:
    when:
      entity: actor_entity_media_player_speak_test
      type: actor_type_media_player_speak_test
      action: actor_action_media_player_speak_test
    then:
      entity: browser
      type: media_player
      action: speak
      data:
        message: This is a test without volume
        language: en

  workflow_media_player_speak_with_volume_test:
    when:
      entity: actor_entity_media_player_speak_with_volume_test
      type: actor_type_media_player_speak_with_volume_test
      action: actor_action_media_player_speak_with_volume_test
    then:
      entity: browser
      type: media_player
      action: speak
      data:
        message: This is a test with volume
        language: en
        volume: 0.1

  workflow_media_player_speak_with_announce_test:
    when:
      entity: actor_entity_media_player_speak_with_announce_test
      type: actor_type_media_player_speak_with_announce_test
      action: actor_action_media_player_speak_with_announce_test
    then:
      entity: browser
      type: media_player
      action: speak
      data:
        message: This is a test with announce
        language: en
        announce: True

  workflow_media_player_speak_with_wait_test:
    when:
      entity: actor_entity_media_player_speak_with_wait_test
      type: actor_type_media_player_speak_with_wait_test
      action: actor_action_media_player_speak_with_wait_test
    then:
      entity: browser
      type: media_player
      action: speak
      data:
        message: This is a test with wait
        language: en
        wait: 3

  workflow_media_player_pause_test:
    when:
      entity: actor_entity_media_player_pause_test
      type: actor_type_media_player_pause_test
      action: actor_action_media_player_pause_test
    then:
      entity: media_player_pause_test
      type: media_player
      action: pause

  workflow_notify_send_message_test:
    when:
      entity: actor_entity_notify_send_message_test
      type: actor_type_notify_send_message_test
      action: actor_action_notify_send_message_test
    then:
      entity: mobile_group
      type: notify
      action: send_message
      data:
        message: Approve something
        feedback_items:
          - title: Approve
            feedback: approve
            acknowledgement: approved
          - title: Deny
            feedback: deny
            acknowledgement: denied

  workflow_notify_confirm_feedback_test:
    when:
      entity: 
        - telegram_user
        - mobile_app_hd1903
      type: notify
      action: feedback_retrieved
    then:
      - entity: reactor_entity_notify_confirm_feedback_test
        type: reactor_type_notify_confirm_feedback_test
        action: reactor_action_notify_confirm_feedback_test
        data:
          feedback: "{{ event.data.feedback }}"
      - entity: "{{ event.entity }}"
        type: notify
        action: confirm_feedback
        forward_data: True

  workflow_input_number_set_test:
    when:
      entity: actor_entity_input_number_set_test
      type: actor_type_input_number_set_test
      action: actor_action_input_number_set_test
    then:
      entity: input_number_value_test
      type: input_number
      action: set_value
      data:
        value: 12.34

  workflow_input_number_increase_test:
    when:
      entity: actor_entity_input_number_increase_test
      type: actor_type_input_number_increase_test
      action: actor_action_input_number_increase_test
    then:
      entity: input_number_value_test
      type: input_number
      action: increase
      data:
        value: 1.5

  workflow_input_number_increase_with_max_test:
    when:
      entity: actor_entity_input_number_increase_with_max_test
      type: actor_type_input_number_increase_with_max_test
      action: actor_action_input_number_increase_with_max_test
    then:
      entity: input_number_value_test
      type: input_number
      action: increase
      data:
        value: 1.5
        max: 51

  workflow_input_number_decrease_test:
    when:
      entity: actor_entity_input_number_decrease_test
      type: actor_type_input_number_decrease_test
      action: actor_action_input_number_decrease_test
    then:
      entity: input_number_value_test
      type: input_number
      action: decrease
      data:
        value: 1.5

  workflow_input_number_decrease_with_min_test:
    when:
      entity: actor_entity_input_number_decrease_with_min_test
      type: actor_type_input_number_decrease_with_min_test
      action: actor_action_input_number_decrease_with_min_test
    then:
      entity: input_number_value_test
      type: input_number
      action: decrease
      data:
        value: 1.5
        min: 49

  workflow_input_text_set_test:
    when:
      entity: actor_entity_input_text_set_test
      type: actor_type_input_text_set_test
      action: actor_action_input_text_set_test
    then:
      entity: input_text_value_test
      type: input_text
      action: set_value
      data:
        value: test_value

  workflow_input_boolean_turn_on_test:
    when:
      entity: actor_entity_input_boolean_turn_on_test
      type: actor_type_input_boolean_turn_on_test
      action: actor_action_input_boolean_turn_on_test
    then:
      entity: input_boolean_initial_off_test
      type: input_boolean
      action: 'on'

  workflow_input_boolean_turn_off_test:
    when:
      entity: actor_entity_input_boolean_turn_off_test
      type: actor_type_input_boolean_turn_off_test
      action: actor_action_input_boolean_turn_off_test
    then:
      entity: input_boolean_initial_on_test
      type: input_boolean
      action: 'off'

  workflow_input_boolean_toggle_test:
    when:
      entity: actor_entity_input_boolean_toggle_test
      type: actor_type_input_boolean_toggle_test
      action: actor_action_input_boolean_toggle_test
    then:
      entity: input_boolean_initial_off_test
      type: input_boolean
      action: toggle

  workflow_input_boolean_turn_on_skip_test:
    when:
      entity: actor_entity_input_boolean_turn_on_skip_test
      type: actor_type_input_boolean_turn_on_skip_test
      action: actor_action_input_boolean_turn_on_skip_test
    then:
      entity: input_boolean_initial_on_test
      type: input_boolean
      action: 'on'

  workflow_input_boolean_turn_off_skip_test:
    when:
      entity: actor_entity_input_boolean_turn_off_skip_test
      type: actor_type_input_boolean_turn_off_skip_test
      action: actor_action_input_boolean_turn_off_skip_test
    then:
      entity: input_boolean_initial_off_test
      type: input_boolean
      action: 'off'

  workflow_media_player_play_favorite_test:
    when:
      entity: actor_entity_media_player_play_favorite_test
      type: actor_type_media_player_play_favorite_test
      action: actor_action_media_player_play_favorite_test
    then:
      entity: media_player_play_favorite_test
      type: media_player
      action: play_favorite
      data:
        favorite_id: test_id

  workflow_light_turn_on_test:
    when:
      entity: actor_entity_light_turn_on_test
      type: actor_type_light_turn_on_test
      action: actor_action_light_turn_on_test
    then:
      entity: light_initial_off_test
      type: light
      action: 'on'

  workflow_light_turn_off_test:
    when:
      entity: actor_entity_light_turn_off_test
      type: actor_type_light_turn_off_test
      action: actor_action_light_turn_off_test
    then:
      entity: light_initial_on_test
      type: light
      action: 'off'

  workflow_light_toggle_test:
    when:
      entity: actor_entity_light_toggle_test
      type: actor_type_light_toggle_test
      action: actor_action_light_toggle_test
    then:
      entity: light_initial_off_test
      type: light
      action: toggle

  workflow_light_turn_on_skip_test:
    when:
      entity: actor_entity_light_turn_on_skip_test
      type: actor_type_light_turn_on_skip_test
      action: actor_action_light_turn_on_skip_test
    then:
      entity: light_initial_on_test
      type: light
      action: 'on'

  workflow_light_turn_off_skip_test:
    when:
      entity: actor_entity_light_turn_off_skip_test
      type: actor_type_light_turn_off_skip_test
      action: actor_action_light_turn_off_skip_test
    then:
      entity: light_initial_off_test
      type: light
      action: 'off'

  workflow_switch_turn_on_test:
    when:
      entity: actor_entity_switch_turn_on_test
      type: actor_type_switch_turn_on_test
      action: actor_action_switch_turn_on_test
    then:
      entity: switch_initial_off_test
      type: switch
      action: 'on'

  workflow_switch_turn_off_test:
    when:
      entity: actor_entity_switch_turn_off_test
      type: actor_type_switch_turn_off_test
      action: actor_action_switch_turn_off_test
    then:
      entity: switch_initial_on_test
      type: switch
      action: 'off'

  workflow_switch_toggle_test:
    when:
      entity: actor_entity_switch_toggle_test
      type: actor_type_switch_toggle_test
      action: actor_action_switch_toggle_test
    then:
      entity: switch_initial_off_test
      type: switch
      action: toggle

  workflow_switch_turn_on_skip_test:
    when:
      entity: actor_entity_switch_turn_on_skip_test
      type: actor_type_switch_turn_on_skip_test
      action: actor_action_switch_turn_on_skip_test
    then:
      entity: switch_initial_on_test
      type: switch
      action: 'on'

  workflow_switch_turn_off_skip_test:
    when:
      entity: actor_entity_switch_turn_off_skip_test
      type: actor_type_switch_turn_off_skip_test
      action: actor_action_switch_turn_off_skip_test
    then:
      entity: switch_initial_off_test
      type: switch
      action: 'off'

  workflow_alarm_plugin_arm_home_test:
    when:
      entity: actor_entity_alarm_arm_home_test
      type: actor_type_alarm_arm_home_test
      action: actor_action_alarm_arm_home_test
    then:
      entity: alarm_plugin_test
      type: alarm_control_panel
      action: arm_home

  workflow_alarm_plugin_arm_away_test:
    when:
      entity: actor_entity_alarm_arm_away_test
      type: actor_type_alarm_arm_away_test
      action: actor_action_alarm_arm_away_test
    then:
      entity: alarm_plugin_test
      type: alarm_control_panel
      action: arm_away

  workflow_alarm_plugin_arm_night_test:
    when:
      entity: actor_entity_alarm_arm_night_test
      type: actor_type_alarm_arm_night_test
      action: actor_action_alarm_arm_night_test
    then:
      entity: alarm_plugin_test
      type: alarm_control_panel
      action: arm_night

  workflow_alarm_plugin_arm_vacation_test:
    when:
      entity: actor_entity_alarm_arm_vacation_test
      type: actor_type_alarm_arm_vacation_test
      action: actor_action_alarm_arm_vacation_test
    then:
      entity: alarm_plugin_test
      type: alarm_control_panel
      action: arm_vacation

  workflow_alarm_plugin_disarm_test:
    when:
      entity: actor_entity_alarm_disarm_test
      type: actor_type_alarm_disarm_test
      action: actor_action_alarm_disarm_test
    then:
      entity: alarm_plugin_test
      type: alarm_control_panel
      action: disarm

  workflow_alarm_plugin_trigger_test:
    when:
      entity: actor_entity_alarm_trigger_test
      type: actor_type_alarm_trigger_test
      action: actor_action_alarm_trigger_test
    then:
      entity: alarm_plugin_test
      type: alarm_control_panel
      action: trigger

  workflow_fan_set_percentage_test:
    when:
      entity: actor_entity_fan_set_percentage_test
      type: actor_type_fan_set_percentage_test
      action: actor_action_fan_set_percentage_test
    then:
      entity: fan_initial_off_test
      type: fan
      action: set_percentage
      data:
        percentage: 50

  workflow_fan_increase_speed_test:
    when:
      entity: actor_entity_fan_increase_speed_test
      type: actor_type_fan_increase_speed_test
      action: actor_action_fan_increase_speed_test
    then:
      entity: fan_initial_on_test
      type: fan
      action: increase_speed

  workflow_fan_decrease_speed_test:
    when:
      entity: actor_entity_fan_decrease_speed_test
      type: actor_type_fan_decrease_speed_test
      action: actor_action_fan_decrease_speed_test
    then:
      entity: fan_initial_on_test
      type: fan
      action: decrease_speed

  workflow_fan_turn_off_test:
    when:
      entity: actor_entity_fan_turn_off_test
      type: actor_type_fan_turn_off_test
      action: actor_action_fan_turn_off_test
    then:
      entity: fan_initial_on_test
      type: fan
      action: set_percentage
      data:
        percentage: 50

  workflow_hass_started_test:
    when:
      entity: hass
      type: system
      action: started
    then:
      entity: input_boolean_hass_started_test
      type: input_boolean
      action: toggle

  workflow_mqtt_publish_test:
    when:
      entity: actor_entity_mqtt_publish_test
      type: actor_type_mqtt_publish_test
      action: actor_action_mqtt_publish_test
    then:
      entity: some/test/topic
      type: mqtt
      action: publish

  workflow_climate_set_temperature_test:
    when:
      entity: actor_entity_climate_set_temperature_test
      type: actor_type_climate_set_temperature_test
      action: actor_action_climate_set_temperature_test
    then:
      entity: climate_initial_off_test
      type: climate
      action: set_temperature
      data:
        temperature: 25

  workflow_climate_reset_temperature_test:
    when:
      entity: actor_entity_climate_reset_temperature_test
      type: actor_type_climate_reset_temperature_test
      action: actor_action_climate_reset_temperature_test
    then:
      entity: climate_initial_off_test
      type: climate
      action: reset_temperature