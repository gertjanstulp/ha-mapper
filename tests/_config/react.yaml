# frontend_repo_url: http://localhost:5000

plugins:
  - module: custom_components.react.plugin.notify
  - module: custom_components.react.plugin.telegram
    config:
      entity_maps:
        "2095689255": telegram_user
        "-719737734": telegram_group
  - module: custom_components.react.plugin.persistent_notification
  - module: custom_components.react.plugin.mobile_app
    config:
      entity_maps:
        "7237746fa7daec45": mobile_app_hd1903
        
  - module: custom_components.react.plugin.input_boolean
  - module: custom_components.react.plugin.input_button
  - module: custom_components.react.plugin.input_number
  - module: custom_components.react.plugin.input_text
  - module: custom_components.react.plugin.light
  - module: custom_components.react.plugin.switch

  - module: custom_components.react.plugin.group

  - module: custom_components.react.plugin.media_player
    config:
      tts_provider: google_translate
  - module: custom_components.react.plugin.sonos
  - module: custom_components.react.plugin.browser_mod
  - module: custom_components.react.plugin.google_translate
    config:
      language: nl
  - module: custom_components.react.plugin.cloud
    config:
      language: nl-NL
      options:
        voice: MaartenNeural

  - module: custom_components.react.plugin.alarm_control_panel
    config:
      code: '1234'

  - module: custom_components.react.plugin.binary_sensor
  - module: custom_components.react.plugin.device_tracker
  - module: custom_components.react.plugin.person
  - module: custom_components.react.plugin.sensor

  - module: custom_components.react.plugin.time
  - module: custom_components.react.plugin.hass
  - module: custom_components.react.plugin.state

  - module: custom_components.react.plugin.deconz
    config:
      entity_maps:
        "935688da192d1dadfd586e00f61b2113": test_entity

  - module: custom_components.react.plugin.esphome
    config:
      entity_property: device_id
      type_maps:
        button:
          input_toggled: toggle

entity_groups:
  reactor_entity_entity_groups_test:
    - entity_groups_test_entity_1
    - entity_groups_test_entity_2

stencil:
  full_stencil:
    when: actor_type_full_stencil.actor_entity_full_stencil actor_action_full_stencil
    then: reactor_type_full_stencil.reactor_entity_full_stencil reactor_action_full_stencil with test=37

  partial_stencil:
    then: 
      id: reactor_partial_stencil
      type: reactor_type_partial_stencil
      action: reactor_action_partial_stencil

workflow:
  workflow_immediate:
    when: actor_type_immediate.actor_entity_immediate actor_action_immediate
    then: reactor_type_immediate.reactor_entity_immediate reactor_action_immediate

  workflow_delayed:
    when: actor_type_delayed.actor_entity_delayed actor_action_delayed
    then: reactor_type_delayed.reactor_entity_delayed reactor_action_delayed wait for 3 seconds

  workflow_overwrite:
    when: actor_type_overwrite.actor_entity_overwrite actor_action_overwrite
    then: >-
      reactor_type_overwrite.reactor_entity_overwrite reactor_action_overwrite 
      use overwrite
      wait for 3 seconds

  workflow_scheduled_all_days:
    when: actor_type_scheduled_all_days.actor_entity_scheduled_all_days actor_action_scheduled_all_days
    then: >-
      reactor_type_scheduled_all_days.reactor_entity_scheduled_all_days reactor_action_scheduled_all_days 
      wait until 12:34:56

  workflow_scheduled_some_days:
    when: actor_type_scheduled_some_days.actor_entity_scheduled_some_days actor_action_scheduled_some_days
    then: >-
      reactor_type_scheduled_some_days.reactor_entity_scheduled_some_days reactor_action_scheduled_some_days 
      wait until 12:34:56 every mon,fri

  workflow_reset:
    when: actor_type_reset.actor_entity_reset actor_action_reset
    then: 
      - reset workflow_delayed
      - reset workflow_scheduled_some_days

  workflow_forward_action:
    when: actor_type_forward_action.actor_entity_forward_action
    then: reactor_type_forward_action.reactor_entity_forward_action reactor_action_forward_action use forward_action
  
  workflow_forward_data:
    when: actor_type_forward_data.actor_entity_forward_data actor_action_forward_data
    then: reactor_type_forward_data.reactor_entity_forward_data reactor_action_forward_data use forward_data

  workflow_trace_basic_test:
    when: 
      - actor_type_trace_basic_test_1.actor_entity_trace_basic_test_1 actor_action_trace_basic_test_1 if {{ is_state('input_boolean.trace_basic_test', 'off') }}
      - actor_type_trace_basic_test_2.actor_entity_trace_basic_test_2 actor_action_trace_basic_test_2
    then: 
      - reactor_type_trace_basic_test_1.reactor_entity_trace_basic_test_1 reactor_action_trace_basic_test_1 if {{ is_state('input_boolean.trace_basic_test', 'on') }}
      - reactor_type_trace_basic_test_2.reactor_entity_trace_basic_test_2 reactor_action_trace_basic_test_2

  workflow_trace_advanced_test:
    when:
      - actor_type_trace_advanced_test_1.actor_entity_trace_advanced_test_1 actor_action_trace_advanced_test_1 if {{ is_state('input_boolean.trace_advanced_test', 'off') }}
      - actor_type_trace_advanced_test_2.actor_entity_trace_advanced_test_2 actor_action_trace_advanced_test_2 if {{ is_state('input_boolean.trace_advanced_test', 'on') }}
    then:
      - >-
        reactor_type_trace_advanced_test_1.reactor_entity_trace_advanced_test_1 reactor_action_trace_advanced_test_1
        if {{ is_state('input_boolean.trace_advanced_test', 'on') }}
        wait until {{ is_state('input_boolean.trace_advanced_test', 'off') }}
        wait for 3 seconds   
      - reset workflow_scheduled
      - >-
        reactor_type_trace_advanced_test_2.reactor_entity_trace_advanced_test_2 reactor_action_trace_advanced_test_2
        wait until {{ is_state('input_boolean.trace_advanced_test', 'on') }}
        wait until 21:00:00

  workflow_multiple_actor:
    when:
      - actor_type_multiple_actor_1.actor_entity_multiple_actor_1 actor_action_multiple_actor_1
      - actor_type_multiple_actor_2.actor_entity_multiple_actor_2 actor_action_multiple_actor_2
    then: reactor_type_multiple_actor.reactor_entity_multiple_actor reactor_action_multiple_actor

  workflow_multiple_reactor:
    when: actor_type_multiple_reactor.actor_entity_multiple_reactor actor_action_multiple_reactor
    then: 
      - reactor_type_multiple_reactor_1.reactor_entity_multiple_reactor_1 reactor_action_multiple_reactor_1
      - reactor_type_multiple_reactor_2.reactor_entity_multiple_reactor_2 reactor_action_multiple_reactor_2

  workflow_multiple_entities:
    when: actor_type_multiple_entities.actor_entity_multiple_entities_1,actor_entity_multiple_entities_2 actor_action_multiple_entities
    then: reactor_type_multiple_entities.reactor_entity_multiple_entities_1,reactor_entity_multiple_entities_2 reactor_action_multiple_entities

  workflow_multiple_actions_test:
    when: actor_type_multiple_actions.actor_entity_multiple_actions actor_action_multiple_actions_1,actor_action_multiple_actions_2
    then: reactor_type_multiple_actions.reactor_entity_multiple_actions reactor_action_multiple_actions_1,reactor_action_multiple_actions_2    

  workflow_entity_groups_test:
    when: actor_type_entity_groups_test.actor_entity_entity_groups_test actor_action_entity_groups_test
    then: reactor_type_entity_groups_test.reactor_entity_entity_groups_test!,reactor_entity_entity_groups_test reactor_action_entity_groups_test

  workflow_data:
    variables:
      type_templated: "{{ 1 + 2 }}"
    when: actor_type_data.actor_entity_data actor_action_data with actor_data_data={{ type_templated }}
    then: reactor_type_data.reactor_entity_data reactor_action_data with data1=1, data2={{ event.action }}, data3={{ type_templated }}, data5={{ actor.id }}, data6==

  workflow_data_delayed:
    when: actor_type_data_delayed.actor_entity_data_delayed actor_action_data_delayed
    then: reactor_type_data_delayed.reactor_entity_data_delayed reactor_action_data_delayed wait for {{ 60 }} seconds with data1=1, data2=True

  workflow_multiple_actor_data:
    when: 
      entity: actor_entity_multiple_actor_data 
      type: actor_type_multiple_actor_data
      action: actor_action_multiple_actor_data
      data:
        - actor_data_multiple_actor_data: 1
        - actor_data_multiple_actor_data: 2
    then: reactor_type_multiple_actor_data.reactor_entity_multiple_actor_data reactor_action_multiple_actor_data

  workflow_full_stencil:
    stencil: full_stencil

  workflow_partial_stencil:
    stencil: partial_stencil
    when: actor_type_partial_stencil.actor_entity_partial_stencil actor_action_partial_stencil
    then:
      id: reactor_partial_stencil
      entity: reactor_entity_partial_stencil

  workflow_templated:
    variables:
      templated: templated
    when: "{{ 'actor' ~ '_type' ~ '_templated' }}.{{ 'actor_entity_templated' }} {{ 'actor_action_' ~ templated }}"
    then: "{{ 'reactor' ~ '_type' ~ '_templated' }}.{{ 're' ~ event.entity }} {{ 'reactor_action_' ~ templated }}"

  workflow_templated_state_test:
    when: "{{ 'actor' ~ '_type' ~ '_templated_state_test' }}.{{ 'actor_entity_templated_state_test' }} {{ 'actor_action_' ~ states('input_text.templated_state_test') }}"
    then: "{{ 'reactor' ~ '_type' ~ '_templated_state_test' }}.{{ 're' ~ event.entity }} {{ 'reactor_action_' ~ states('input_text.templated_state_test') }}"

  workflow_actor_condition_test:
    when: actor_type_actor_condition_test.actor_entity_actor_condition_test actor_action_actor_condition_test if {{ is_state('input_boolean.actor_condition_test', 'on') }}
    then: reactor_type_actor_condition_test.reactor_entity_actor_condition_test reactor_action_actor_condition_test

  workflow_reactor_condition_test:
    when: actor_type_reactor_condition_test.actor_entity_reactor_condition_test actor_action_reactor_condition_test
    then: reactor_type_reactor_condition_test.reactor_entity_reactor_condition_test reactor_action_reactor_condition_test if {{ is_state('input_boolean.reactor_condition_test', 'on') }}

  workflow_binary_sensor_state_test:
    when: binary_sensor.binary_sensor_state_test off
    then: reactor_type_binary_sensor_state_test.reactor_entity_binary_sensor_state_test reactor_action_binary_sensor_state_test

  workflow_group_state_test:
    when: group.group_state_test on
    then: reactor_type_group_state_test.reactor_entity_group_state_test reactor_action_group_state_test

  workflow_person_group_state_test:
    when: group.person_group_state_test home
    then: reactor_type_person_group_state_test.reactor_entity_person_group_state_test reactor_action_person_group_state_test

  workflow_device_tracker_state_test:
    when: device_tracker.device_tracker_state_test home
    then: reactor_type_device_tracker_state_test.reactor_entity_device_tracker_state_test reactor_action_device_tracker_state_test

  workflow_person_state_test:
    when: person.person_state_test not_home
    then: reactor_type_person_state_test.reactor_entity_person_state_test reactor_action_person_state_test

  workflow_input_number_state_test:
    when: input_number.input_number_state_test change
    then: reactor_type_input_number_state_test.reactor_entity_input_number_state_test reactor_action_input_number_state_test

  workflow_input_text_state_test:
    when: input_text.input_text_state_test change
    then: reactor_type_input_text_state_test.reactor_entity_input_text_state_test reactor_action_input_text_state_test

  workflow_input_boolean_state_test:
    when: input_boolean.input_boolean_state_test toggle
    then: reactor_type_input_boolean_state_test.reactor_entity_input_boolean_state_test reactor_action_input_boolean_state_test

  workflow_input_button_state_test:
    when: input_button.input_button_state_test press
    then: reactor_type_input_button_state_test.reactor_entity_input_button_state_test reactor_action_input_button_state_test

  workflow_light_state_test:
    when: light.light_state_test toggle
    then: reactor_type_light_state_test.reactor_entity_light_state_test reactor_action_light_state_test

  workflow_switch_state_test:
    when: switch.switch_state_test toggle
    then: reactor_type_switch_state_test.reactor_entity_switch_state_test reactor_action_switch_state_test

  workflow_alarm_state_test:
    when: alarm_control_panel.alarm_state_test armed_home
    then: reactor_type_alarm_state_test.reactor_entity_alarm_state_test reactor_action_alarm_state_test

  workflow_sensor_state_test:
    when: sensor.sensor_state_test change
    then: reactor_type_sensor_state_test.reactor_entity_sensor_state_test reactor_action_sensor_state_test

  workflow_media_player_state_test:
    when: media_player.media_player_state_test playing
    then: reactor_type_media_player_state_test.reactor_entity_media_player_state_test reactor_action_media_player_state_test

  workflow_fan_state_test:
    when: fan.fan_state_test change
    then: reactor_type_fan_state_test.reactor_entity_fan_state_test reactor_action_fan_state_test

  workflow_fan_state_percentage_test:
    when: fan.fan_state_percentage_test change
    then: reactor_type_fan_state_percentage_test.reactor_entity_fan_state_percentage_test reactor_action_fan_state_percentage_test

  workflow_state_track_test:
    when: state.input_number.input_number_value_test change
    then: state.{{ event.entity }} log use forward_data

  workflow_hass_event_start_test:
    when: system.hass start
    then: reactor_type_hass_event_start_test.reactor_entity_hass_event_start_test reactor_action_hass_event_start_test

  workflow_hass_event_started_test:
    when: system.hass started
    then: reactor_type_hass_event_started_test.reactor_entity_hass_event_started_test reactor_action_hass_event_started_test

  workflow_hass_event_shutdown_test:
    when: system.hass shutdown
    then: reactor_type_hass_event_shutdown_test.reactor_entity_hass_event_shutdown_test reactor_action_hass_event_shutdown_test

  workflow_time_clock:
    when: time.clock 23:59:59
    then: reactor_type_time_clock.reactor_entity_time_clock reactor_action_time_clock

  workflow_time_pattern:
    when: time.pattern 23:59:59 # keep like this, otherwise test instance will constantly trigger. will be set properly by unittest
    then: reactor_type_time_pattern.reactor_entity_time_pattern reactor_action_time_pattern

  workflow_time_sunrise:
    when: time.sunrise -
    then: reactor_type_sunrise.reactor_entity_sunrise reactor_action_sunrise

  workflow_time_sunrise_with_offset:
    when: time.sunrise +00:30:00
    then: reactor_type_sunrise_with_offset.reactor_entity_sunrise_with_offset reactor_action_sunrise_with_offset

  workflow_time_sunset:
    when: time.sunset -
    then: reactor_type_sunset.reactor_entity_sunset reactor_action_sunset

  workflow_time_sunset_with_offset:
    when: time.sunset -00:30:00
    then: reactor_type_sunset_with_offset.reactor_entity_sunset_with_offset reactor_action_sunset_with_offset

  workflow_binary_sensor_available_test:
    when: binary_sensor.binary_sensor_available_test available
    then: actor_type_binary_sensor_available_test.actor_entity_binary_sensor_available_test actor_action_binary_sensor_available_test

  workflow_binary_sensor_unavailable_test:
    when: binary_sensor.binary_sensor_unavailable_test unavailable
    then: actor_type_binary_sensor_unavailable_test.actor_entity_binary_sensor_unavailable_test actor_action_binary_sensor_unavailable_test

  workflow_device_tracker_available_test:
    when: device_tracker.device_tracker_available_test available
    then: actor_type_device_tracker_available_test.actor_entity_device_tracker_available_test actor_action_device_tracker_available_test

  workflow_device_tracker_unavailable_test:
    when: device_tracker.device_tracker_unavailable_test unavailable
    then: actor_type_device_tracker_unavailable_test.actor_entity_device_tracker_unavailable_test actor_action_device_tracker_unavailable_test

  workflow_wait_for_state_test:
    when: actor_type_wait_for_state_test.actor_entity_wait_for_state_test actor_action_wait_for_state_test 
    then: >-
      reactor_type_wait_for_state_test.reactor_entity_wait_for_state_test reactor_action_wait_for_state_test
      wait until {{ is_state('input_boolean.wait_for_state_test', 'on') }}

  workflow_wait_for_state_delayed_test:
    when: actor_type_wait_for_state_delayed_test.actor_entity_wait_for_state_delayed_test actor_action_wait_for_state_delayed_test
    then: reactor_type_wait_for_state_delayed_test.reactor_entity_wait_for_state_delayed_test reactor_action_wait_for_state_delayed_test wait until {{ is_state('input_boolean.wait_for_state_delayed_test', 'on') }} wait for 3 seconds

  workflow_delayed_long_single:
    when: actor_type_delayed_long_single.actor_entity_delayed_long_single actor_action_delayed_long_single
    then: reactor_type_delayed_long_single.reactor_entity_delayed_long_single reactor_action_delayed_long_single wait for 300 seconds
    mode: single

  workflow_delayed_long_restart:
    when: actor_type_delayed_long_restart.actor_entity_delayed_long_restart actor_action_delayed_long_restart
    then: reactor_type_delayed_long_restart.reactor_entity_delayed_long_restart reactor_action_delayed_long_restart wait for 300 seconds
    mode: restart

  workflow_delayed_long_queued:
    when: actor_type_delayed_long_queued.actor_entity_delayed_long_queued actor_action_delayed_long_queued
    then: reactor_type_delayed_long_queued.reactor_entity_delayed_long_queued reactor_action_delayed_long_queued wait for 3 seconds
    mode: queued

  workflow_delayed_long_parallel:
    when: actor_type_delayed_long_parallel.actor_entity_delayed_long_parallel actor_action_delayed_long_parallel
    then: reactor_type_delayed_long_parallel.reactor_entity_delayed_long_parallel reactor_action_delayed_long_parallel wait for 3 seconds
    mode: parallel

  workflow_scheduled_restart_abort:
    when: actor_type_scheduled_restart_abort.actor_entity_scheduled_restart_abort actor_action_scheduled_restart_abort
    then: reactor_type_scheduled_restart_abort.reactor_entity_scheduled_restart_abort reactor_action_scheduled_restart_abort wait until 00:00:00 use restart_mode abort

  workflow_scheduled_restart_force:
    when: actor_type_scheduled_restart_force.actor_entity_scheduled_restart_force actor_action_scheduled_restart_force
    then: reactor_type_scheduled_restart_force.reactor_entity_scheduled_restart_force reactor_action_scheduled_restart_force wait until 00:00:00 use restart_mode force

  workflow_media_player_speak_test:
    when: actor_type_media_player_speak_test.actor_entity_media_player_speak_test actor_action_media_player_speak_test
    then: media_player.browser speak with message=This is a test without volume, language=en

  workflow_media_player_speak_with_volume_test:
    when: actor_type_media_player_speak_with_volume_test.actor_entity_media_player_speak_with_volume_test actor_action_media_player_speak_with_volume_test
    then: media_player.browser speak with message=This is a test with volume, language=en, volume=0.1

  workflow_media_player_speak_with_announce_test:
    when: actor_type_media_player_speak_with_announce_test.actor_entity_media_player_speak_with_announce_test actor_action_media_player_speak_with_announce_test
    then: media_player.browser speak with message=This is a test with announce, language=en, announce=True

  workflow_media_player_speak_with_wait_test:
    when: actor_type_media_player_speak_with_wait_test.actor_entity_media_player_speak_with_wait_test actor_action_media_player_speak_with_wait_test
    then: media_player.browser speak with message=This is a test with wait, language=en, wait=3

  workflow_media_player_pause_test:
    when: actor_type_media_player_pause_test.actor_entity_media_player_pause_test actor_action_media_player_pause_test
    then: media_player.media_player_pause_test pause

  workflow_notify_send_message_test:
    when: actor_type_notify_send_message_test.actor_entity_notify_send_message_test actor_action_notify_send_message_test
    then: 
      type: notify
      entity: mobile_group
      action: send_message
      data:
        message: Approve something
        feedback_items:
          - title: Approve
            feedback: approve
            acknowledgement: approved
          - title: Deny
            feedback: deny
            acknowledgement: denied

  workflow_notify_confirm_feedback_test:
    when: notify.telegram_user,mobile_app_hd1903 feedback_retrieved
    then:
      - reactor_type_notify_confirm_feedback_test.reactor_entity_notify_confirm_feedback_test reactor_action_notify_confirm_feedback_test with feedback={{ event.data.feedback }}
      - notify.{{ event.entity }} confirm_feedback use forward_data

  workflow_input_number_set_test:
    when: actor_type_input_number_set_test.actor_entity_input_number_set_test actor_action_input_number_set_test
    then: input_number.input_number_value_test set_value data value=12.34

  workflow_input_number_increase_test:
    when: actor_type_input_number_increase_test.actor_entity_input_number_increase_test actor_action_input_number_increase_test
    then: input_number.input_number_value_test increase data value1.5

  workflow_input_number_increase_with_max_test:
    when: actor_type_input_number_increase_with_max_test.actor_entity_input_number_increase_with_max_test actor_action_input_number_increase_with_max_test
    then: input_number.input_number_value_test increase with value=1.5, max=51

  workflow_input_number_decrease_test:
    when: actor_type_input_number_decrease_test.actor_entity_input_number_decrease_test actor_action_input_number_decrease_test
    then: input_number.input_number_value_test decrease with value=1.5

  workflow_input_number_decrease_with_min_test:
    when: actor_type_input_number_decrease_with_min_test.actor_entity_input_number_decrease_with_min_test actor_action_input_number_decrease_with_min_test
    then: input_number.input_number_value_test decrease with value=1.5, min=49

  workflow_input_text_set_test:
    when: actor_type_input_text_set_test.actor_entity_input_text_set_test actor_action_input_text_set_test
    then: input_text.input_text_value_test set_value with value=test_value

  workflow_input_boolean_turn_on_test:
    when: actor_type_input_boolean_turn_on_test.actor_entity_input_boolean_turn_on_test actor_action_input_boolean_turn_on_test
    then: input_boolean.input_boolean_initial_off_test on

  workflow_input_boolean_turn_off_test:
    when: actor_type_input_boolean_turn_off_test.actor_entity_input_boolean_turn_off_test actor_action_input_boolean_turn_off_test
    then: input_boolean.input_boolean_initial_on_test off

  workflow_input_boolean_toggle_test:
    when: actor_type_input_boolean_toggle_test.actor_entity_input_boolean_toggle_test actor_action_input_boolean_toggle_test
    then: input_boolean.input_boolean_initial_off_test toggle

  workflow_input_boolean_turn_on_skip_test:
    when: actor_type_input_boolean_turn_on_skip_test.actor_entity_input_boolean_turn_on_skip_test actor_action_input_boolean_turn_on_skip_test
    then: input_boolean.input_boolean_initial_on_test on

  workflow_input_boolean_turn_off_skip_test:
    when: actor_type_input_boolean_turn_off_skip_test.actor_entity_input_boolean_turn_off_skip_test actor_action_input_boolean_turn_off_skip_test
    then: input_boolean.input_boolean_initial_off_test off

  workflow_media_player_play_favorite_test:
    when: actor_type_media_player_play_favorite_test.actor_entity_media_player_play_favorite_test actor_action_media_player_play_favorite_test
    then: media_player.media_player_play_favorite_test play_favorite with favorite_id=test_id

  workflow_light_turn_on_test:
    when: actor_type_light_turn_on_test.actor_entity_light_turn_on_test actor_action_light_turn_on_test
    then: light.light_initial_off_test on

  workflow_light_turn_off_test:
    when: actor_type_light_turn_off_test.actor_entity_light_turn_off_test actor_action_light_turn_off_test
    then: light.light_initial_on_test off

  workflow_light_toggle_test:
    when: actor_type_light_toggle_test.actor_entity_light_toggle_test actor_action_light_toggle_test
    then: light.light_initial_off_test toggle

  workflow_light_turn_on_skip_test:
    when: actor_type_light_turn_on_skip_test.actor_entity_light_turn_on_skip_test actor_action_light_turn_on_skip_test
    then: light.light_initial_on_test on

  workflow_light_turn_off_skip_test:
    when: actor_type_light_turn_off_skip_test.actor_entity_light_turn_off_skip_test actor_action_light_turn_off_skip_test
    then: light.light_initial_off_test off

  workflow_switch_turn_on_test:
    when: actor_type_switch_turn_on_test.actor_entity_switch_turn_on_test actor_action_switch_turn_on_test
    then: switch.switch_initial_off_test on

  workflow_switch_turn_off_test:
    when: actor_type_switch_turn_off_test.actor_entity_switch_turn_off_test actor_action_switch_turn_off_test
    then: switch.switch_initial_on_test off

  workflow_switch_toggle_test:
    when: actor_type_switch_toggle_test.actor_entity_switch_toggle_test actor_action_switch_toggle_test
    then: switch.switch_initial_off_test toggle

  workflow_switch_turn_on_skip_test:
    when: actor_type_switch_turn_on_skip_test.actor_entity_switch_turn_on_skip_test actor_action_switch_turn_on_skip_test
    then: switch.switch_initial_on_test on

  workflow_switch_turn_off_skip_test:
    when: actor_type_switch_turn_off_skip_test.actor_entity_switch_turn_off_skip_test actor_action_switch_turn_off_skip_test
    then: switch.switch_initial_off_test off

  workflow_alarm_plugin_arm_home_test:
    when: actor_type_alarm_arm_home_test.actor_entity_alarm_arm_home_test actor_action_alarm_arm_home_test
    then: alarm_control_panel.alarm_plugin_test arm_home

  workflow_alarm_plugin_arm_away_test:
    when: actor_type_alarm_arm_away_test.actor_entity_alarm_arm_away_test actor_action_alarm_arm_away_test
    then: alarm_control_panel.alarm_plugin_test arm_away

  workflow_alarm_plugin_arm_night_test:
    when: actor_type_alarm_arm_night_test.actor_entity_alarm_arm_night_test actor_action_alarm_arm_night_test
    then: alarm_control_panel.alarm_plugin_test arm_night

  workflow_alarm_plugin_arm_vacation_test:
    when: actor_type_alarm_arm_vacation_test.actor_entity_alarm_arm_vacation_test actor_action_alarm_arm_vacation_test
    then: alarm_control_panel.alarm_plugin_test arm_vacation

  workflow_alarm_plugin_disarm_test:
    when: actor_type_alarm_disarm_test.actor_entity_alarm_disarm_test actor_action_alarm_disarm_test
    then: alarm_control_panel.alarm_plugin_test disarm

  workflow_alarm_plugin_trigger_test:
    when: actor_type_alarm_trigger_test.actor_entity_alarm_trigger_test actor_action_alarm_trigger_test
    then: alarm_control_panel.alarm_plugin_test trigger

  workflow_fan_set_percentage_test:
    when: actor_type_fan_set_percentage_test.actor_entity_fan_set_percentage_test actor_action_fan_set_percentage_test
    then: fan.fan_initial_off_test set_percentage with percentage=50

  workflow_fan_increase_speed_test:
    when: actor_type_fan_increase_speed_test.actor_entity_fan_increase_speed_test actor_action_fan_increase_speed_test
    then: fan.fan_initial_on_test increase_speed

  workflow_fan_decrease_speed_test:
    when: actor_type_fan_decrease_speed_test.actor_entity_fan_decrease_speed_test actor_action_fan_decrease_speed_test
    then: fan.fan_initial_on_test decrease_speed

  workflow_fan_turn_off_test:
    when: actor_type_fan_turn_off_test.actor_entity_fan_turn_off_test actor_action_fan_turn_off_test
    then: fan.fan_initial_on_test set_percentage with percentage=50

  workflow_hass_started_test:
    when: system.hass started
    then: input_boolean.input_boolean_hass_started_test toggle

  workflow_mqtt_publish_test:
    when: actor_type_mqtt_publish_test.actor_entity_mqtt_publish_test actor_action_mqtt_publish_test
    then: mqtt.some/test/topic publish

  workflow_climate_set_temperature_test:
    when: actor_type_climate_set_temperature_test.actor_entity_climate_set_temperature_test actor_action_climate_set_temperature_test
    then: climate.climate_initial_off_test set_temperature with temperature=25

  workflow_climate_reset_temperature_test:
    when: actor_type_climate_reset_temperature_test.actor_entity_climate_reset_temperature_test actor_action_climate_reset_temperature_test
    then: climate.climate_initial_off_test reset_temperature
